using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace ModDotaHelper
{

    public class CryptoChainValidator
    {
        /// <summary>
        /// ModDota's public key for repo auth.
        /// Yes, it isn't neat, but it works.
        /// </summary>
        #region The ModDota Root Mod Key
        private static byte[] publicrootkey =
        {0x30, 0x82, 0x0A, 0x51, 0x30, 0x82, 0x06, 0x39, 0xA0, 0x03, 0x02, 0x01, 0x02,
0x02, 0x09, 0x00, 0xDC, 0x70, 0x9C, 0x0C, 0x44, 0xBE, 0x3C, 0x82, 0x30, 0x0D,
0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00,
0x30, 0x81, 0x9D, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
0x02, 0x55, 0x53, 0x31, 0x11, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C,
0x08, 0x56, 0x69, 0x72, 0x67, 0x69, 0x6E, 0x69, 0x61, 0x31, 0x10, 0x30, 0x0E,
0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x07, 0x46, 0x61, 0x69, 0x72, 0x66, 0x61,
0x78, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x07, 0x4D,
0x6F, 0x64, 0x44, 0x6F, 0x74, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55,
0x04, 0x0B, 0x0C, 0x0D, 0x4D, 0x6F, 0x64, 0x44, 0x6F, 0x74, 0x61, 0x43, 0x6C,
0x69, 0x65, 0x6E, 0x74, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03,
0x0C, 0x0B, 0x6D, 0x6F, 0x64, 0x64, 0x6F, 0x74, 0x61, 0x2E, 0x63, 0x6F, 0x6D,
0x31, 0x29, 0x30, 0x27, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
0x09, 0x01, 0x16, 0x1A, 0x70, 0x65, 0x6E, 0x67, 0x75, 0x69, 0x6E, 0x77, 0x69,
0x7A, 0x7A, 0x61, 0x72, 0x64, 0x40, 0x6D, 0x6F, 0x64, 0x64, 0x6F, 0x74, 0x61,
0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x35, 0x30, 0x33, 0x31,
0x31, 0x30, 0x34, 0x35, 0x30, 0x32, 0x34, 0x5A, 0x17, 0x0D, 0x32, 0x35, 0x30,
0x33, 0x30, 0x38, 0x30, 0x34, 0x35, 0x30, 0x32, 0x34, 0x5A, 0x30, 0x81, 0x9D,
0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
0x31, 0x11, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x08, 0x56, 0x69,
0x72, 0x67, 0x69, 0x6E, 0x69, 0x61, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55,
0x04, 0x07, 0x0C, 0x07, 0x46, 0x61, 0x69, 0x72, 0x66, 0x61, 0x78, 0x31, 0x10,
0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x07, 0x4D, 0x6F, 0x64, 0x44,
0x6F, 0x74, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C,
0x0D, 0x4D, 0x6F, 0x64, 0x44, 0x6F, 0x74, 0x61, 0x43, 0x6C, 0x69, 0x65, 0x6E,
0x74, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0B, 0x6D,
0x6F, 0x64, 0x64, 0x6F, 0x74, 0x61, 0x2E, 0x63, 0x6F, 0x6D, 0x31, 0x29, 0x30,
0x27, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16,
0x1A, 0x70, 0x65, 0x6E, 0x67, 0x75, 0x69, 0x6E, 0x77, 0x69, 0x7A, 0x7A, 0x61,
0x72, 0x64, 0x40, 0x6D, 0x6F, 0x64, 0x64, 0x6F, 0x74, 0x61, 0x2E, 0x63, 0x6F,
0x6D, 0x30, 0x82, 0x04, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86,
0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x04, 0x0F, 0x00, 0x30,
0x82, 0x04, 0x0A, 0x02, 0x82, 0x04, 0x01, 0x00, 0xE2, 0x65, 0x92, 0x73, 0xD6,
0x78, 0x26, 0x14, 0xEC, 0x25, 0x0F, 0x08, 0xA3, 0x3C, 0x45, 0x61, 0x2C, 0x07,
0x32, 0x4A, 0xDF, 0x29, 0x50, 0x9F, 0x4D, 0xA9, 0x3F, 0xA1, 0xD5, 0x82, 0x86,
0x59, 0xC2, 0x11, 0x9A, 0xD1, 0x3A, 0x9B, 0xB4, 0x61, 0xCE, 0xAD, 0xE0, 0xAB,
0x93, 0x94, 0x40, 0x24, 0xE2, 0x31, 0x4C, 0x67, 0x23, 0xFD, 0x52, 0x65, 0xD0,
0x4B, 0x5C, 0xB9, 0xFC, 0x97, 0x8B, 0x96, 0x79, 0x1C, 0x87, 0x94, 0x30, 0x9F,
0x33, 0x9B, 0x7F, 0xD7, 0xCC, 0x0D, 0x12, 0x27, 0x2F, 0x05, 0x42, 0xD7, 0x4A,
0x50, 0xFB, 0xF1, 0xD8, 0x43, 0x4F, 0xB4, 0x38, 0xD7, 0xB4, 0xF2, 0xBC, 0xFB,
0xD3, 0x8D, 0xD4, 0x8D, 0x97, 0x53, 0x6C, 0x10, 0x60, 0x23, 0xED, 0xB6, 0x2A,
0x56, 0xE6, 0x36, 0x09, 0x8F, 0x1F, 0x0C, 0x14, 0xD6, 0x6B, 0x7D, 0x11, 0xCF,
0x9C, 0xE2, 0x11, 0x1C, 0x8E, 0x84, 0x91, 0x39, 0x61, 0x7E, 0x8B, 0x20, 0x04,
0x10, 0xA2, 0x9B, 0x03, 0xBF, 0x4B, 0x02, 0x47, 0x27, 0xE1, 0x1F, 0x04, 0xE2,
0xBC, 0x30, 0x86, 0xDF, 0x25, 0x86, 0xD5, 0xBF, 0x59, 0xA8, 0x41, 0x56, 0x57,
0xEA, 0x20, 0x94, 0x44, 0x1A, 0xDF, 0x16, 0x17, 0xF1, 0x90, 0x8C, 0x2A, 0x1A,
0x01, 0x52, 0x01, 0xD1, 0xED, 0xAE, 0xFD, 0x6C, 0x4F, 0x4D, 0x79, 0x1D, 0x8E,
0xBC, 0x36, 0x3E, 0x5C, 0x0F, 0x74, 0x8F, 0x6F, 0x39, 0x6F, 0xEB, 0x2F, 0x5C,
0xFE, 0x4C, 0xA0, 0xBF, 0x70, 0x7D, 0xF2, 0x5B, 0x37, 0xA3, 0xD2, 0x5A, 0x74,
0x8D, 0x25, 0xF0, 0xCE, 0x78, 0x07, 0x4D, 0x71, 0x1C, 0x01, 0x76, 0x9B, 0x00,
0xAB, 0xE8, 0x79, 0xFB, 0x81, 0xD9, 0xB0, 0x72, 0x15, 0xA8, 0xCA, 0x5F, 0x82,
0xC1, 0x7E, 0x48, 0xD9, 0x97, 0x64, 0x9A, 0xE0, 0xBC, 0xC9, 0x80, 0xEA, 0x22,
0x59, 0x89, 0xA7, 0x25, 0x51, 0x46, 0x65, 0x3B, 0x2D, 0xF0, 0x82, 0x7B, 0x85,
0xC1, 0x70, 0xF3, 0x6B, 0x36, 0x99, 0x44, 0xA0, 0xDD, 0xEB, 0x4D, 0x9B, 0x0F,
0x9D, 0xA7, 0x18, 0xDB, 0xEE, 0xE6, 0x8A, 0x61, 0x6A, 0x27, 0x9F, 0xCE, 0x42,
0x51, 0xF4, 0xCC, 0x92, 0x88, 0x48, 0xBC, 0x0B, 0x9C, 0x29, 0x2C, 0x8F, 0xD4,
0xB3, 0x0B, 0x5B, 0x46, 0xF2, 0xC0, 0xA9, 0xB9, 0xF7, 0xAC, 0x8C, 0xD2, 0x8E,
0x9D, 0xF4, 0x67, 0xE3, 0xB3, 0x03, 0x25, 0x58, 0x56, 0xEE, 0x5C, 0xB8, 0xD8,
0x52, 0x5E, 0xA0, 0xD7, 0x75, 0x52, 0x2A, 0x6C, 0x68, 0xCE, 0x76, 0x96, 0x08,
0x0D, 0x1A, 0x5F, 0x69, 0x2D, 0x63, 0x54, 0xE5, 0xB8, 0x11, 0x50, 0x7D, 0x96,
0x95, 0xD4, 0xCE, 0x05, 0xB6, 0x63, 0x94, 0x89, 0xBD, 0x49, 0x57, 0xCF, 0x56,
0x82, 0x73, 0xC7, 0x71, 0x25, 0xF7, 0xE3, 0xA3, 0x9A, 0x7C, 0xBD, 0x74, 0x1A,
0x34, 0x39, 0xE6, 0x0A, 0x64, 0x94, 0xDC, 0x06, 0x0E, 0x39, 0xB3, 0xF6, 0x96,
0x52, 0xA3, 0x69, 0xF7, 0xD1, 0xCF, 0x28, 0xFD, 0x33, 0x7E, 0x8B, 0xB6, 0x03,
0x7D, 0x75, 0x34, 0x69, 0x6F, 0x54, 0x8F, 0x2E, 0x7C, 0x98, 0x6F, 0xE6, 0x03,
0x05, 0x69, 0x85, 0x15, 0x9F, 0x8E, 0x58, 0xCE, 0xBC, 0x56, 0xF8, 0x1A, 0x03,
0x6E, 0xBF, 0x23, 0xDE, 0x84, 0xA5, 0x98, 0x6B, 0xDA, 0x43, 0x6D, 0x4E, 0x5E,
0xC5, 0x41, 0x37, 0x75, 0x98, 0xE8, 0x0C, 0xA9, 0xD4, 0x5B, 0x4B, 0xB2, 0x44,
0x3F, 0x8B, 0xB2, 0xAB, 0x69, 0xDA, 0xAD, 0x43, 0x0C, 0xE4, 0xA6, 0x22, 0xAD,
0xF3, 0x8C, 0xB0, 0x19, 0x85, 0x8C, 0x10, 0xC3, 0x21, 0x54, 0xB3, 0x05, 0xC2,
0x70, 0x54, 0x65, 0x4E, 0xEC, 0x00, 0x5A, 0x18, 0x82, 0x0A, 0xB7, 0x7B, 0x48,
0x22, 0xAD, 0xDA, 0x70, 0xF1, 0xED, 0xE4, 0xED, 0x5A, 0x5A, 0x09, 0x26, 0xEC,
0x4B, 0xDB, 0x0B, 0x9B, 0xC5, 0x3E, 0x92, 0xB1, 0xAF, 0x6A, 0x7F, 0x73, 0x4F,
0x96, 0xD4, 0xE2, 0x3F, 0x4F, 0xC9, 0x8C, 0x21, 0xC7, 0x10, 0xF2, 0x9D, 0x07,
0x52, 0x71, 0x17, 0x5B, 0x07, 0x09, 0x2F, 0x46, 0x33, 0x24, 0x71, 0xE0, 0x2E,
0xA3, 0xDB, 0xE7, 0xB4, 0xFA, 0x0B, 0x69, 0xA2, 0x01, 0x0D, 0x61, 0x9A, 0xCC,
0x0C, 0x66, 0x0C, 0x26, 0x22, 0xB2, 0x72, 0xE4, 0x5E, 0x6B, 0xF1, 0x1B, 0x3D,
0x72, 0xD1, 0xE8, 0x9B, 0x43, 0x85, 0xA6, 0xE4, 0x56, 0x84, 0x5F, 0x7D, 0xB6,
0xB9, 0x14, 0x27, 0x24, 0x22, 0x81, 0xF2, 0x18, 0x49, 0xF1, 0x03, 0x65, 0x60,
0xD3, 0x7F, 0xD4, 0x56, 0xF0, 0x24, 0x56, 0x90, 0xAC, 0x63, 0x8F, 0x5B, 0x59,
0xBD, 0xE3, 0xB5, 0xAD, 0xC6, 0xB9, 0x52, 0x30, 0xE6, 0x2B, 0xC8, 0xA6, 0x4E,
0x1D, 0xB0, 0x2D, 0x3E, 0x2D, 0xF2, 0xD8, 0x75, 0xFD, 0x3F, 0x6D, 0x0B, 0x32,
0x07, 0x9C, 0xE5, 0x3A, 0x0C, 0xAF, 0x11, 0x49, 0x46, 0x83, 0x53, 0xAF, 0x61,
0xD0, 0x36, 0x68, 0x47, 0x32, 0x04, 0x4E, 0x7A, 0xF2, 0xED, 0x16, 0x86, 0x6A,
0x13, 0x44, 0x87, 0x55, 0xA7, 0x32, 0x40, 0x93, 0xE3, 0x5B, 0xA3, 0x3F, 0x1D,
0xD1, 0x2F, 0x66, 0x10, 0x59, 0xAB, 0x83, 0x6D, 0xA2, 0xE0, 0x3D, 0xA3, 0x16,
0x3A, 0xEF, 0xED, 0xDA, 0xF3, 0x57, 0x56, 0x67, 0xD0, 0x45, 0xED, 0x7E, 0x5E,
0x4D, 0x50, 0xE2, 0x58, 0x2D, 0xCC, 0xBE, 0xD3, 0xEB, 0x9D, 0x12, 0xD4, 0x45,
0x19, 0x7F, 0xA4, 0xDA, 0xA8, 0x56, 0x7A, 0xB4, 0x08, 0xF6, 0xEB, 0x13, 0xF5,
0xBC, 0x75, 0x7E, 0xEA, 0x90, 0xB1, 0x40, 0x04, 0x44, 0x76, 0x71, 0x27, 0x57,
0xD6, 0xB3, 0x8D, 0x4C, 0x15, 0x22, 0x51, 0xEA, 0x71, 0x8D, 0xB3, 0x36, 0x33,
0x34, 0xE6, 0xF2, 0x07, 0x1F, 0x2B, 0x0F, 0xE4, 0x0C, 0xB8, 0x9C, 0x8A, 0x8D,
0x94, 0xB8, 0x5D, 0x35, 0x6A, 0x4D, 0x61, 0xE5, 0xE2, 0x96, 0x83, 0x16, 0x0C,
0x59, 0x50, 0xB6, 0x53, 0x05, 0x41, 0x99, 0x8D, 0xDC, 0x90, 0xCE, 0x70, 0x9E,
0x30, 0x7B, 0x35, 0x99, 0x26, 0xC6, 0x7A, 0x32, 0x9C, 0x57, 0x35, 0x03, 0x4B,
0xD7, 0x71, 0x79, 0xC4, 0x37, 0x60, 0x2D, 0xC1, 0xD0, 0x4E, 0x2B, 0x4E, 0xEC,
0x01, 0x21, 0x27, 0x25, 0xFF, 0xC7, 0xE7, 0x6D, 0x75, 0x75, 0x90, 0x1B, 0x24,
0xFF, 0x26, 0xF0, 0x92, 0x39, 0xEB, 0x83, 0xE7, 0x9A, 0xFC, 0xCD, 0x63, 0x96,
0x1F, 0x95, 0xBE, 0xB0, 0x5B, 0x92, 0xAA, 0x91, 0xE9, 0xAC, 0xD1, 0xF6, 0xD2,
0x00, 0x2F, 0x9F, 0xF9, 0x54, 0x58, 0xDD, 0xFD, 0xBC, 0x61, 0x09, 0xBC, 0x3D,
0xA9, 0x7D, 0x34, 0xAE, 0x84, 0x53, 0x66, 0xA0, 0xE6, 0x40, 0xF5, 0xA2, 0xDA,
0x67, 0x11, 0xB0, 0xAA, 0xBB, 0x0C, 0xEA, 0xED, 0x3F, 0x09, 0xDE, 0x15, 0x0A,
0x10, 0x73, 0x8E, 0x65, 0xAE, 0xAD, 0x67, 0xA5, 0x68, 0x8B, 0x8C, 0x94, 0x53,
0xCB, 0xBB, 0x5E, 0x3E, 0xF2, 0x9F, 0x91, 0xC4, 0xBF, 0x3C, 0x04, 0xCA, 0xFD,
0x2F, 0x8D, 0xEF, 0xA5, 0xA1, 0x8B, 0xFE, 0x2D, 0xA9, 0xE5, 0x60, 0x4D, 0xF3,
0x64, 0xA4, 0xBA, 0x3C, 0xCB, 0xD9, 0x8A, 0x60, 0x0D, 0xD0, 0xEE, 0x66, 0x70,
0xE3, 0xD5, 0xA1, 0x03, 0x12, 0xA7, 0xE3, 0xE8, 0xDC, 0xF3, 0x43, 0xEA, 0xB1,
0xB7, 0x3B, 0x5F, 0x43, 0xEA, 0x7A, 0xA1, 0xF3, 0xE1, 0x01, 0xA1, 0x63, 0x32,
0x78, 0x4C, 0x2A, 0xB3, 0x3B, 0xA7, 0xD2, 0x66, 0x77, 0x0D, 0xCC, 0x6C, 0xAC,
0xC1, 0xA5, 0x35, 0xA3, 0xAA, 0xB6, 0xE3, 0x5E, 0x1F, 0xBA, 0x15, 0x23, 0x23,
0x10, 0xF2, 0x7E, 0x7A, 0x3C, 0xEF, 0xCF, 0x34, 0x00, 0x3B, 0xA5, 0x93, 0x25,
0x90, 0x4D, 0xCD, 0xAF, 0x05, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x81, 0x91,
0x30, 0x81, 0x8E, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04,
0x14, 0x31, 0x67, 0x8F, 0x5D, 0xCB, 0x61, 0x6E, 0x07, 0x07, 0xA5, 0x46, 0x02,
0xFA, 0x13, 0x04, 0xEE, 0x0F, 0xE9, 0xEF, 0x2D, 0x30, 0x1F, 0x06, 0x03, 0x55,
0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x31, 0x67, 0x8F, 0x5D, 0xCB,
0x61, 0x6E, 0x07, 0x07, 0xA5, 0x46, 0x02, 0xFA, 0x13, 0x04, 0xEE, 0x0F, 0xE9,
0xEF, 0x2D, 0x30, 0x31, 0x06, 0x03, 0x55, 0x1D, 0x1F, 0x04, 0x2A, 0x30, 0x28,
0x30, 0x26, 0xA0, 0x24, 0xA0, 0x22, 0x86, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73,
0x3A, 0x2F, 0x2F, 0x6D, 0x6F, 0x64, 0x64, 0x6F, 0x74, 0x61, 0x2E, 0x63, 0x6F,
0x6D, 0x2F, 0x6D, 0x64, 0x63, 0x2F, 0x72, 0x6F, 0x6F, 0x74, 0x2E, 0x63, 0x72,
0x6C, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x05, 0x30, 0x03, 0x01,
0x01, 0xFF, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02,
0x01, 0x06, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x04, 0x01, 0x00, 0xBD, 0x2B, 0x46, 0xA7,
0xA5, 0x3F, 0x5A, 0x2E, 0x86, 0x8A, 0x80, 0x0F, 0x10, 0xDB, 0xE1, 0x1C, 0x6A,
0xF3, 0xAD, 0x7A, 0xFE, 0xCD, 0xFB, 0x4D, 0xEE, 0xF7, 0x18, 0xB4, 0xBB, 0x9E,
0x97, 0xC0, 0xB1, 0x75, 0x93, 0x91, 0x0D, 0xFD, 0x8E, 0xFC, 0x8A, 0x51, 0x6F,
0x98, 0xF5, 0xAF, 0xD8, 0x98, 0xDD, 0xA7, 0x7E, 0xD3, 0x17, 0xC1, 0xA4, 0x03,
0x18, 0x2C, 0x54, 0xC1, 0x52, 0xFB, 0xCD, 0xF8, 0x1F, 0xA6, 0x21, 0xC6, 0x86,
0xA1, 0xE1, 0x90, 0xBD, 0xAF, 0x4B, 0x35, 0xAE, 0x99, 0x74, 0xAA, 0x7D, 0x5D,
0x5C, 0x93, 0xC1, 0x64, 0x70, 0x47, 0xBE, 0x94, 0x6D, 0xFE, 0x7E, 0x28, 0xB6,
0xD4, 0x3F, 0x47, 0x30, 0x15, 0x4E, 0x42, 0x62, 0x6B, 0xBC, 0x38, 0x09, 0x76,
0x7F, 0x00, 0x06, 0x4A, 0x8B, 0x54, 0x24, 0x02, 0xF5, 0x15, 0x4F, 0x14, 0x4D,
0x4A, 0x59, 0x90, 0xEF, 0x94, 0x34, 0x7C, 0x1C, 0xFF, 0x81, 0xB1, 0x06, 0xE5,
0xAF, 0x28, 0x5D, 0x5B, 0xFE, 0xFD, 0xE9, 0x30, 0x5A, 0xE0, 0x57, 0x63, 0x0E,
0xA0, 0xCD, 0x43, 0xD9, 0x73, 0xE6, 0xA9, 0x3F, 0x8C, 0x32, 0x0B, 0x7B, 0x52,
0x95, 0x84, 0xD4, 0xA3, 0x91, 0x1A, 0x5E, 0x7E, 0xB7, 0x49, 0x14, 0x28, 0x61,
0xA1, 0x33, 0xCF, 0xE6, 0x5A, 0xA6, 0x57, 0x06, 0x84, 0xFD, 0x32, 0xDC, 0xC9,
0xB2, 0x53, 0x4D, 0xD8, 0xDF, 0x2B, 0xF8, 0x42, 0x90, 0xF8, 0x63, 0xA9, 0x7B,
0x1D, 0x07, 0x5F, 0xBD, 0xA5, 0x25, 0xA4, 0x4E, 0xA0, 0x68, 0xA4, 0x18, 0x02,
0x91, 0xDF, 0x08, 0x50, 0xB8, 0x76, 0x22, 0x69, 0x75, 0x5A, 0x88, 0xF3, 0x61,
0xAA, 0x46, 0x68, 0xC9, 0x00, 0x48, 0x19, 0xA2, 0xB5, 0x72, 0x23, 0x31, 0xAF,
0x99, 0xF8, 0xE1, 0x73, 0x82, 0x94, 0xB7, 0x2F, 0x20, 0xC3, 0x7D, 0xC9, 0xA7,
0x3C, 0x40, 0xE1, 0x62, 0x2A, 0x4C, 0x95, 0x3E, 0x28, 0x0D, 0xDF, 0xDE, 0xE4,
0x23, 0x26, 0x12, 0x21, 0xB8, 0x1B, 0x74, 0x68, 0xDE, 0x85, 0x82, 0x75, 0x3F,
0x88, 0x34, 0x50, 0xF0, 0x30, 0x39, 0xDD, 0x42, 0xA1, 0x91, 0x96, 0x93, 0x96,
0x0C, 0x6E, 0xF1, 0x13, 0xC8, 0x78, 0x68, 0x7D, 0xD4, 0xC7, 0x8C, 0xC2, 0xE8,
0x53, 0x28, 0x73, 0xB7, 0x67, 0x39, 0x0D, 0xBD, 0x2A, 0xA3, 0x39, 0xB6, 0xB6,
0x41, 0x47, 0xE5, 0xDE, 0xFC, 0xF6, 0x80, 0xF5, 0x91, 0x25, 0x94, 0x44, 0x7A,
0x31, 0xD3, 0x37, 0x93, 0xC4, 0xF4, 0xC6, 0x9D, 0xF1, 0xDA, 0xF6, 0xE7, 0x4F,
0xF9, 0x82, 0x46, 0x46, 0xB9, 0x40, 0xC2, 0x40, 0x50, 0x26, 0xC2, 0x55, 0xA8,
0x52, 0x20, 0x1F, 0x98, 0x03, 0x72, 0xB9, 0x08, 0x6B, 0x45, 0x51, 0xCB, 0x54,
0x5F, 0xBA, 0x2A, 0x45, 0x9E, 0x9D, 0x24, 0x40, 0xE1, 0x47, 0xFF, 0xB2, 0x3E,
0xE3, 0xFB, 0x8B, 0x25, 0xF2, 0x80, 0x76, 0x53, 0x6A, 0x07, 0x25, 0x8A, 0x39,
0xA7, 0x9B, 0xAC, 0x35, 0x4E, 0x92, 0x46, 0xF0, 0xF3, 0x13, 0x31, 0xF3, 0xCA,
0x54, 0x4B, 0x29, 0xEF, 0x1D, 0xA5, 0xB5, 0xBB, 0xBD, 0x06, 0x5F, 0xC9, 0x06,
0xD1, 0xD3, 0x91, 0x91, 0x09, 0xA5, 0xB0, 0x1F, 0xDA, 0xBE, 0xE8, 0x1C, 0xCC,
0x30, 0x69, 0xC6, 0xC9, 0xFD, 0xCD, 0xCE, 0x0C, 0xD8, 0xA4, 0xCF, 0x22, 0x86,
0xF1, 0x6F, 0x7E, 0x59, 0x58, 0x12, 0x29, 0x26, 0xE7, 0xC9, 0x50, 0x49, 0x2F,
0xE8, 0xBF, 0x19, 0x52, 0x50, 0x45, 0x6A, 0xC3, 0x17, 0x1E, 0x30, 0x44, 0x4D,
0x4E, 0xA3, 0xD8, 0x0D, 0x85, 0x66, 0x69, 0x32, 0xC8, 0xF8, 0xC3, 0xF6, 0xB7,
0x43, 0x92, 0x38, 0x8C, 0xC4, 0x2B, 0x5C, 0x27, 0xFD, 0x65, 0xBC, 0xB5, 0xB7,
0xDB, 0xBD, 0x04, 0xBD, 0x2D, 0x42, 0x94, 0xB0, 0xB1, 0x76, 0x26, 0xD1, 0x8F,
0xF6, 0x2E, 0x4F, 0x79, 0xA7, 0xAD, 0x97, 0x0B, 0xC1, 0x3B, 0x83, 0x0C, 0xD6,
0xAA, 0xF3, 0xDD, 0xFA, 0x29, 0x80, 0x5D, 0x09, 0x9D, 0xDA, 0x80, 0x95, 0x01,
0x11, 0xB6, 0xA1, 0xCF, 0x1C, 0xB4, 0x0F, 0x0B, 0x7B, 0x4B, 0x16, 0x03, 0x05,
0xAD, 0x85, 0x60, 0x21, 0x57, 0x09, 0x30, 0xB1, 0x15, 0x9C, 0xD2, 0xF7, 0x36,
0xCB, 0xDE, 0xB4, 0x97, 0xEA, 0xD7, 0xD2, 0x94, 0xF7, 0xF4, 0xB3, 0x6C, 0xD6,
0x7D, 0x85, 0x20, 0xA2, 0x5E, 0xAD, 0x33, 0xB5, 0xCF, 0x53, 0x4E, 0x25, 0x88,
0x85, 0xC8, 0x37, 0x48, 0x3A, 0x32, 0x5D, 0xB1, 0xA1, 0xAA, 0x80, 0xFE, 0x77,
0x25, 0xFD, 0x41, 0xF2, 0x4D, 0x7F, 0xBB, 0x9D, 0x1F, 0x1A, 0xA4, 0xD0, 0x9C,
0xA1, 0xA3, 0x8F, 0xF6, 0xE5, 0x19, 0x20, 0x60, 0x30, 0x2E, 0x42, 0x3D, 0xD2,
0x37, 0x47, 0x27, 0x5A, 0x71, 0x63, 0x74, 0x26, 0x9F, 0x89, 0xBE, 0x8C, 0x52,
0xE8, 0xC4, 0x3F, 0x29, 0xBE, 0x31, 0xD9, 0xB6, 0x6E, 0xC9, 0xFE, 0xB7, 0xDB,
0xF9, 0x35, 0xA9, 0xA5, 0x09, 0xB6, 0x44, 0xCA, 0x83, 0xC4, 0x66, 0xD0, 0x66,
0x57, 0x0D, 0x6B, 0x0D, 0xBC, 0x87, 0x89, 0x51, 0x1C, 0xDA, 0x5F, 0x8A, 0xEA,
0x6B, 0xD4, 0x65, 0x79, 0xB5, 0x88, 0x9A, 0x23, 0xB8, 0x22, 0x37, 0x52, 0x5E,
0xA8, 0x77, 0xC2, 0xA2, 0x5D, 0x6D, 0xA5, 0xFB, 0xBE, 0xCB, 0x45, 0x52, 0x46,
0xF3, 0xB1, 0x84, 0xA8, 0x4A, 0x67, 0x4D, 0xFB, 0x27, 0xE6, 0x6A, 0x84, 0xF5,
0x9D, 0x8E, 0xE1, 0x53, 0xB1, 0x41, 0x91, 0x08, 0xB6, 0x09, 0x2C, 0xC9, 0xE5,
0x6B, 0xF4, 0x3D, 0x32, 0xF4, 0x44, 0x27, 0x57, 0x0B, 0x15, 0xFA, 0xB8, 0x13,
0xCE, 0xD4, 0x92, 0xBB, 0x9F, 0x69, 0xF0, 0x07, 0x04, 0xC2, 0xC1, 0x4F, 0x5C,
0x10, 0xD5, 0x76, 0xFD, 0x78, 0x44, 0x7A, 0x66, 0xE5, 0x9D, 0x7D, 0x56, 0x24,
0x5C, 0xE1, 0xB8, 0x4E, 0xA3, 0x0E, 0x6E, 0x82, 0x3C, 0x30, 0x76, 0x99, 0x51,
0x17, 0x9C, 0x61, 0x3B, 0xF3, 0x59, 0x60, 0x49, 0x81, 0x96, 0x7B, 0x0B, 0x24,
0x40, 0x06, 0x21, 0x53, 0xCC, 0x00, 0x29, 0xCC, 0x90, 0xD0, 0x15, 0xDF, 0xEC,
0x5E, 0xA3, 0xF4, 0xFB, 0xAD, 0x70, 0xCD, 0x9B, 0x75, 0xB0, 0xD7, 0x84, 0x74,
0xB0, 0x28, 0x3C, 0x6E, 0x9C, 0x60, 0x9B, 0x23, 0x9A, 0x31, 0x4A, 0xF0, 0x4B,
0x74, 0x62, 0x62, 0x6D, 0x75, 0xC8, 0xFE, 0x8D, 0xC0, 0x2C, 0x96, 0xD5, 0xFF,
0xCA, 0xD0, 0x3F, 0xEC, 0x3F, 0x0D, 0x66, 0x24, 0xC9, 0x6E, 0xCB, 0xB8, 0x26,
0xC7, 0x49, 0x8D, 0x7C, 0x97, 0xF6, 0x52, 0x23, 0x0B, 0xE5, 0x67, 0x00, 0xFD,
0xAF, 0xBC, 0xAF, 0x0A, 0x36, 0x92, 0xAE, 0x9F, 0x8B, 0xE2, 0x91, 0x3B, 0x2A,
0x59, 0x66, 0x63, 0x2B, 0x5C, 0xD3, 0xCB, 0x4F, 0xBC, 0x5F, 0x20, 0xF9, 0x7D,
0x91, 0xFB, 0xF1, 0x6D, 0xF6, 0x79, 0xD3, 0x15, 0x83, 0xB6, 0xE2, 0x72, 0x1E,
0x92, 0xCB, 0x82, 0xC9, 0x7C, 0xB8, 0xF6, 0x10, 0xF9, 0x15, 0x4C, 0xFE, 0xFF,
0x32, 0xC6, 0xBB, 0x7A, 0xDC, 0xD8, 0x34, 0xA5, 0x23, 0x7A, 0xD1, 0x1C, 0xAC,
0xB9, 0x0D, 0xC2, 0xD2, 0x39, 0xD0, 0x7F, 0x2C, 0x6C, 0xD9, 0x0C, 0x5B, 0xEC,
0xC5, 0x25, 0x36, 0xF8, 0xB5, 0x39, 0x91, 0x4C, 0x95, 0xD6, 0x75, 0x06, 0x7B,
0x7E, 0x8F, 0xE7, 0xAB, 0x28, 0x0A, 0xAE, 0x7C, 0x3E, 0x53, 0xE9, 0x6B, 0x73,
0x33, 0xB4, 0x87, 0x33, 0x92, 0x93, 0x4D, 0x28, 0x46, 0x75, 0x4E, 0xFE, 0xF5,
0x71, 0x2F, 0x30, 0x84, 0x5E, 0x7D, 0x54, 0xB7, 0xFE, 0xC0, 0x4F, 0xB0, 0x97,
0x24, 0x1C, 0x1F, 0x3B, 0xEB, 0x3F, 0x27, 0x12, 0x3A, 0x83, 0x6F, 0xA7, 0xA3,
0x7E, 0xB8, 0xAE, 0x39, 0xA1, 0x24};
        #endregion
        /// <summary>
        /// The crypto chain of trust.
        /// </summary>
        X509Chain certchain;
        public CryptoChainValidator()
        {
            X509Certificate2 rootcert = new X509Certificate2(publicrootkey);
            certchain = new X509Chain();
            certchain.ChainPolicy.RevocationMode = X509RevocationMode.Online;
            certchain.ChainPolicy.ExtraStore.Add(rootcert);
            certchain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllowUnknownCertificateAuthority;
        }
        /// <summary>
        /// Checks the signature of a data file, and returns null if it fails, or the data if it succeeds.
        /// </summary>
        /// <param name="data">The file KV.</param>
        /// <returns>True if the signature check passes, false otherwise.</returns>
        public bool CheckSignature(KV.KeyValue data)
        {
            try
            {
                if (data["signatureinfo"] == null || data["body"] == null)
                {
                    Console.WriteLine("Couldn't find the necessary signature information or body block of checked KV, failing signature check.");
                    return false;
                }
                if (data["signatureinfo"]["certificate"] == null)
                {
                    Console.WriteLine("Couldn't find the certificate in the specified KV for signature check, failing signature check.");
                    return false;
                }
                if (data["signatureinfo"]["signature"] == null)
                {
                    Console.WriteLine("Couldn't find the signature in the specifeid KV, failing signature check.");
                    return false;
                }
                X509Certificate2 certificate = new X509Certificate2(Convert.FromBase64String(data["signatureinfo"]["certificate"].Value));
                bool isValid = certchain.Build(certificate);
                if (!isValid)
                {
                    Console.WriteLine("Unable to validate certificate chain, failing signature check.");
                    return false;
                }
                // Get the contents nice and ready to be checked.
                string contents = data["body"].ToString();
                byte[] contentbytes = new byte[contents.Length * sizeof(char)];
                System.Buffer.BlockCopy(contents.ToCharArray(),0,contentbytes,0,contentbytes.Length);
                // Get the signature decoded.
                byte[] signaturebytes = Convert.FromBase64String(data["signatureinfo"]["signature"].Value);
                var rsa = certificate.PublicKey.Key as RSACryptoServiceProvider;
                // Check the signature!
                bool verified = rsa.VerifyData(contentbytes,"SHA256",signaturebytes);
                if (!verified)
                {
                    Console.WriteLine("Signature check failed to match signature to signed data, failing signature check.");
                    return false;
                }
                // Well, it all checks out.
                return true;
            } catch (Exception e)
            {
                Console.WriteLine("Unexpected exception in signature check, failing signature check.");
                Console.WriteLine("Exception was " + e.ToString());
                return false;
            }
        }
        /// <summary>
        /// The signature of the directory was bad or missing.
        /// </summary>
        public class SignatureException : Exception
        {
            public SignatureException()
            {
            }
        }
    }
}
